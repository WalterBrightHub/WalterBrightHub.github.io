<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小程序适配iPad等宽屏设备的方案</title>
      <link href="/2020-05/miniprogram-pad/"/>
      <url>/2020-05/miniprogram-pad/</url>
      
        <content type="html"><![CDATA[<p>在小程序中可以使用rpx单位作为尺寸单位，但在iPad上的体验并不好。</p><a id="more"></a><p>rpx单位的优点：根据750px设计稿构建代码，手机端有一致的体验。对于小屏设备（如iPhone 5或iPad的小分屏），不需要再写代码来适配。<br>rpx单位的缺点：当设备宽度过宽时，内容被同比放大，产生不良的体验。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>当设备宽度&lt;=480px时，使用rpx单位。<br>当设备宽度&gt;=480px时，使用px单位,数值从480px下的rpx数值换算得出。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>这里以scss为例</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 480/750=0.64*/</span></span><br><span class="line"><span class="keyword">@function</span> toPadPx(<span class="variable">$rpx</span>)&#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$rpx</span>*<span class="number">0.64px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> pad-devices &#123;</span><br><span class="line">  <span class="keyword">@media</span> (min-width:<span class="number">480px</span>) &#123;</span><br><span class="line">      <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">32</span>rpx;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@include</span> pad-devices &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: toPadPx(<span class="number">32</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后得到：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">32</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20.48px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>紫币商店/工具车/金卡攻略</title>
      <link href="/2020-04/jesko-purple-store/"/>
      <url>/2020-04/jesko-purple-store/</url>
      
        <content type="html"><![CDATA[<p>今天是网络专家最后一天，玩家可解锁网络领袖了，本文从工具车的角度，总结了紫币商店的购买攻略。</p><a id="more"></a><h2 id="零-总览"><a href="#零-总览" class="headerlink" title="零 总览"></a>零 总览</h2><p>本文主要讲述Scalo、H2、tdf三个车，由于488不金卡，故488金卡可不购买。</p><p>先给出重要结论</p><ul><li>专家商店购买Scalo图纸，以通关：两星-领袖3/三星-领袖4/四星-九王1。</li><li>专家商店购买H2图纸，以通关：四星-领袖2/四星-九王2。</li><li>专家商店购买tdf图纸，以通关：三星-领袖3/四星-领袖4/五星-九王1。</li><li>H2满星，并且可以进入九王4的玩家，在专家商店和领袖商店购买H2金卡，直到拥有7张，随便插均可满足3000分。</li><li>Scalo满星并且可以进入九王3的玩家，在领袖商店和九王商店购买Scalo金卡，直到拥有两张，并插在<strong>极速</strong>上，恰好满足3011分。</li><li>Scalo满星并且可以进入九王4的玩家，在领袖商店和九王商店购买Scalo金卡，直到拥有四张，并插在<strong>极速和加速</strong>上，恰好满足3041分。</li><li>tdf满星，极速无金卡，并且可以进入九王4的玩家，在领袖商店和九王商店购买tdf金卡，直到拥有8张，<strong>别插极速</strong>上就可以满足3650分。</li><li>tdf满星，极速已安装金卡，并且可以进入九王4的玩家，在领袖商店和九王商店购买tdf金卡，直到拥有9张，随便插均可以满足3650分。</li></ul><h2 id="一-卡关条件"><a href="#一-卡关条件" class="headerlink" title="一 卡关条件"></a>一 卡关条件</h2><p>这张图根据官方邮件，总结了最后12阶段所需要的图纸条件和金卡条件。</p><img src="/2020-04/jesko-purple-store/task.png" class="" title="卡关条件"><h2 id="二-紫币商店"><a href="#二-紫币商店" class="headerlink" title="二 紫币商店"></a>二 紫币商店</h2><p>注意解锁领袖阶段和解锁领袖商店的区别：</p><p>解锁领袖阶段需要21300SP，解锁领袖商店需要22300SP。</p><p>例如，今天达到了21600SP，解锁了明天的领袖1关卡，但部分关卡需要工具车而没有完成，那么可以明天继续肝SP解锁领袖商店。</p><img src="/2020-04/jesko-purple-store/store.png" class="" title="紫币商店"><h2 id="三-Artega-Scalo-Superelletra"><a href="#三-Artega-Scalo-Superelletra" class="headerlink" title="三 Artega Scalo Superelletra"></a>三 Artega Scalo Superelletra</h2><h3 id="图纸"><a href="#图纸" class="headerlink" title="图纸"></a>图纸</h3><p>在<strong>专家商店</strong>购买足量的scalo图纸，达到一星/两星/三星/四星均可。注意sp达到19100会给三张图纸的。解锁了网络领袖后不氪金就买不到了。</p><h3 id="金卡"><a href="#金卡" class="headerlink" title="金卡"></a>金卡</h3><p><strong>九王3</strong>需要2~3张金卡，性能分3011分。</p><p><strong>九王4</strong>需要4~6张金卡，性能分3041分。</p><p>来源：领袖商店两张，九王商店两张。</p><p>这里的~是怎么回事呢？原来安装部分不同，所加的性能分也不同，如果要减少金卡数量，安装金卡的时候要选择<strong>加性能分高</strong>的部分安装，其他车也适用这个小技巧。</p><p>让我们来具体看看加金卡的性能分增量吧。</p><table><thead><tr><th>车辆</th><th>MAX</th><th>需求</th><th>极速</th><th>加速</th><th>操控</th><th>氮气</th><th>改装顺序示例</th></tr></thead><tbody><tr><td>Scalo</td><td>3093</td><td>3011/3041</td><td>21</td><td>15</td><td>13</td><td>13</td><td>极速→加速→氮气→操控</td></tr><tr><td>H2</td><td>3026</td><td>3000</td><td>16</td><td>14</td><td>14</td><td>15</td><td>随便装七个，影响不大</td></tr><tr><td>tdf</td><td>3705</td><td>3650</td><td>13</td><td>15</td><td>16</td><td>16</td><td>氮气→操控→加速→极速</td></tr></tbody></table><p>因为Scalo的金卡，在极速和加速上，性能分增量高，所以先装极速、再装加速、最后装氮气和操控。</p><p>推荐改装：2金卡，极速2/加速0/操控0/氮气0，性能分3011。</p><p>推荐改装：4金卡，极速2/加速2/操控0/氮气0，性能分3041。</p><p>这两个改装顺序也挺适合刷图改装思路的。</p><p>如果紫币商店一共只有4张金卡，那么<strong>必须插在极速和加速上</strong>。</p><p>悲剧改装：3金卡，极速0/加速0/操控1/氮气2，性能分3021。</p><p>悲剧改装：6金卡，极速0/加速2/操控2/氮气2，性能分3051。</p><h2 id="四-Pininfarina-H2-Speed"><a href="#四-Pininfarina-H2-Speed" class="headerlink" title="四 Pininfarina H2 Speed"></a>四 Pininfarina H2 Speed</h2><h3 id="图纸-1"><a href="#图纸-1" class="headerlink" title="图纸"></a>图纸</h3><p>专家商店有图纸，不过老玩家应该都满星啦。</p><h3 id="金卡-1"><a href="#金卡-1" class="headerlink" title="金卡"></a>金卡</h3><p><strong>九王4</strong>需要3000性能分，7张h2金卡。</p><p>来源：<strong>专家商店</strong>有6张，<strong>领袖商店</strong>有2张。传奇商店不定期刷新。</p><p>只要插7张必然超过3000分，随意安装即可。</p><h2 id="五-Ferrari-F12tdf"><a href="#五-Ferrari-F12tdf" class="headerlink" title="五 Ferrari F12tdf"></a>五 Ferrari F12tdf</h2><h3 id="图纸-2"><a href="#图纸-2" class="headerlink" title="图纸"></a>图纸</h3><p>在<strong>专家商店</strong>购买足量的tdf图纸，达到一星/两星/三星/四星/五星均可。注意sp达到246000会给三张图纸的。解锁了网络领袖后不氪金就买不到了。</p><h3 id="金卡-2"><a href="#金卡-2" class="headerlink" title="金卡"></a>金卡</h3><p><strong>九王4</strong>需要3650性能分，8~9张金卡。</p><p>来源：</p><ul><li>老玩家应该有几张tdf金卡了</li><li>进行中的tdf巅峰赛事最高（前5%）给2张金卡</li><li>领袖商店2张金卡</li><li>九王商店2张金卡</li></ul><p>因为tdf的金卡，在操控和氮气上，性能分增量高，所以先装氮气和操控、再装加速、最后装极速。</p><p>这一点与Scalo不同，这个改装顺序是违反刷图改装思路的。</p><p>如果只需要8金卡就能达到3650分，唯一的条件是极速不能插金卡：</p><p>推荐改装：8金卡，极速0/加速3/操控2/氮气3，性能分3650分。</p><p>推荐改装：8金卡，极速0/加速3/操控3/氮气2，性能分3650分。</p><p>推荐改装：8金卡，极速0/加速2/操控3/氮气3，性能分3651分。</p><p>如果<strong>极速</strong>上已经插了金卡，那么<strong>必须要9张金卡</strong>，因为</p><p>悲剧改装：8金卡，极速1/加速1/操控3/氮气3，性能分3649分。</p><p>那有同学就要问了，我极速上插了满满当当三张，还需要更多金卡吗？其实是不必要的，因为9金卡最坏情况：</p><p>悲剧改装：9金卡，极速3/加速3/操控3/氮气0，性能分3657分。</p><h2 id="六-传奇商店还是紫币商店"><a href="#六-传奇商店还是紫币商店" class="headerlink" title="六 传奇商店还是紫币商店"></a>六 传奇商店还是紫币商店</h2><p>除了紫币商店，车辆的金卡也会在传奇商店刷新，那么当传奇商店刷新出了工具车的金卡，是否有必要红币购买呢？</p><p>个人认为，如果消耗的紫币多，例如购买大量图纸和金卡，那么用红币购买可以缓解紫币不足的问题；</p><p>如果消耗的紫币少，例如工具车已经有了一些金卡，氪金搞出了很多图纸，那么紫币就相对富余一点，可以直接用紫币购买。</p><h2 id="七-结语"><a href="#七-结语" class="headerlink" title="七 结语"></a>七 结语</h2><p>如有错误疏漏之处，欢迎指正哟。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 狂野飙车9 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逗酱的怪怪编码</title>
      <link href="/2020-03/doogle-decode/"/>
      <url>/2020-03/doogle-decode/</url>
      
        <content type="html"><![CDATA[<p>逗酱想要把数字转换成编码。</p><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>逗酱需要把数字先转换成二进制，再转换成编码，转换规律是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0     &#x3D;&gt; 口</span><br><span class="line">00    &#x3D;&gt; 吕</span><br><span class="line">000   &#x3D;&gt; 品</span><br><span class="line">1     &#x3D;&gt; Ⅰ</span><br><span class="line">11    &#x3D;&gt; Ⅱ</span><br><span class="line">111   &#x3D;&gt; Ⅲ</span><br><span class="line">010   &#x3D;&gt; 中</span><br><span class="line">00100 &#x3D;&gt; 串</span><br></pre></td></tr></table></figure><p>同时逗酱要求转换后的编码长度尽可能小。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>很基础的动态规划，设二进制字串为s，设dp[i]表示s前i位字符的最小编码长度，则<br>若s[i]==’0’</p><ul><li><p>s[i]单独编码成<code>口</code>，编码长度是dp[i-1]+1</p></li><li><p>s[i-1:i]为00，编码成<code>吕</code>，编码长度是dp[i-2]+1。</p></li><li><p>s[i-2:i]为000，编码成<code>品</code>，编码长度是dp[i-3]+1。</p></li><li><p>s[i-2:i]为010，编码成<code>中</code>，编码长度是dp[i-3]+1。</p></li><li><p>s[i-4:i]为00100，编码成<code>串</code>，编码长度是dp[i-5]+1。</p></li></ul><p>故dp[i]=min(dp[i-1],dp[i-2]?,dp[i-3]?,dp[i-5]?)+1，注意上述五个情况有些不会满足。</p><p>同理若s[i]==’1’</p><ul><li><p>s[i]单独编码成<code>Ⅰ</code>，编码长度是dp[i-1]+1。</p></li><li><p>若s[i-1:i]为11，编码成<code>Ⅱ</code>，编码长度是dp[i-2]+1。</p></li><li><p>若s[i-2:i]为111，编码成<code>Ⅲ</code>，编码长度是dp[i-3]+1。</p></li></ul><p>故dp[i]=min(dp[i-1],dp[i-2]?,dp[i-3]?)+1，注意上述三个情况不一定同时满足。</p><p>最少编码长度就是dp[s.length]</p><p>那么知道了最少编码长度，怎么求最少编码呢？</p><p>我们可以用left数组标记编码位置，即s[0:i]的最佳编码是s[0:left-1]的编码+s[left:i]的编码。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> code = &#123;</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'Ⅰ'</span>,</span><br><span class="line">  <span class="string">'11'</span>: <span class="string">'Ⅱ'</span>,</span><br><span class="line">  <span class="string">'111'</span>: <span class="string">'Ⅲ'</span>,</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'口'</span>,</span><br><span class="line">  <span class="string">'00'</span>: <span class="string">'吕'</span>,</span><br><span class="line">  <span class="string">'000'</span>: <span class="string">'品'</span>,</span><br><span class="line">  <span class="string">'010'</span>: <span class="string">'中'</span>,</span><br><span class="line">  <span class="string">'00100'</span>: <span class="string">'串'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getBinary = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(n===<span class="number">0</span>) <span class="keyword">return</span> <span class="string">'0'</span></span><br><span class="line">  <span class="keyword">let</span> ans = <span class="string">''</span></span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    ans = n % <span class="number">2</span> + ans</span><br><span class="line">    n = <span class="built_in">Math</span>.floor(n / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(ans)</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> decodeDoogle = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> b = getBinary(n)</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(b.length + <span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> left = <span class="keyword">new</span> <span class="built_in">Array</span>(b.length + <span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= b.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b[i - <span class="number">1</span>] === <span class="string">'0'</span>) &#123;  <span class="comment">// 0, 00,000,010,00100</span></span><br><span class="line">      <span class="keyword">let</span> p0, p00, p000, p010, p00100</span><br><span class="line">      p0 = dp[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; b.slice(i - <span class="number">2</span>, i - <span class="number">1</span>) === <span class="string">'0'</span>) &#123;</span><br><span class="line">        p00 = dp[i - <span class="number">2</span>] + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">2</span> &amp;&amp; b.slice(i - <span class="number">3</span>, i - <span class="number">1</span>) === <span class="string">'00'</span>) &#123;</span><br><span class="line">        p000 = dp[i - <span class="number">3</span>] + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">2</span> &amp;&amp; b.slice(i - <span class="number">3</span>, i - <span class="number">1</span>) === <span class="string">'01'</span>) &#123;</span><br><span class="line">        p010 = dp[i - <span class="number">3</span>] + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">4</span> &amp;&amp; b.slice(i - <span class="number">5</span>, i - <span class="number">1</span>) === <span class="string">'0010'</span>) &#123;</span><br><span class="line">        p00100 = dp[i - <span class="number">5</span>] + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      dp[i] = <span class="built_in">Math</span>.min(</span><br><span class="line">        p0,</span><br><span class="line">        p00 || <span class="literal">Infinity</span>,</span><br><span class="line">        p000 || <span class="literal">Infinity</span>,</span><br><span class="line">        p010 || <span class="literal">Infinity</span>,</span><br><span class="line">        p00100 || <span class="literal">Infinity</span></span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (p0 === dp[i]) &#123;</span><br><span class="line">        left[i] = i - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (p00 === dp[i]) &#123;</span><br><span class="line">        left[i] = i - <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (p000 === dp[i] || p010 === dp[i]) &#123;</span><br><span class="line">        left[i] = i - <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (p00100 === dp[i]) &#123;</span><br><span class="line">        left[i] = i - <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;   <span class="comment">// 1,11,11 1</span></span><br><span class="line">      <span class="keyword">let</span> p1, p11, p111</span><br><span class="line">      p1 = dp[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; b.slice(i - <span class="number">2</span>, i - <span class="number">1</span>) === <span class="string">'1'</span>) &#123;</span><br><span class="line">        p11 = dp[i - <span class="number">2</span>] + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">2</span> &amp;&amp; b.slice(i - <span class="number">3</span>, i - <span class="number">1</span>) === <span class="string">'11'</span>) &#123;</span><br><span class="line">        p111 = dp[i - <span class="number">3</span>] + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      dp[i] = <span class="built_in">Math</span>.min(</span><br><span class="line">        p1,</span><br><span class="line">        p11 || <span class="literal">Infinity</span>,</span><br><span class="line">        p111 || <span class="literal">Infinity</span></span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (p1 === dp[i]) &#123;</span><br><span class="line">        left[i] = i - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (p11 === dp[i]) &#123;</span><br><span class="line">        left[i] = i - <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (p111 === dp[i]) &#123;</span><br><span class="line">        left[i] = i - <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = <span class="string">''</span></span><br><span class="line">  <span class="keyword">let</span> p = b.length</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    ans = code[b.slice(left[p], p)] + ans</span><br><span class="line">    p = left[p]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(decodeDoogle(<span class="number">4870847</span>))</span><br><span class="line"> <span class="comment">// 10010100101001010111111</span></span><br><span class="line"> <span class="comment">// =&gt; Ⅰ吕Ⅰ中中Ⅰ吕Ⅰ中ⅢⅢ</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小胖的二十四点</title>
      <link href="/2019-03/24-game/"/>
      <url>/2019-03/24-game/</url>
      
        <content type="html"><![CDATA[<p>帮助小胖计算24点。</p><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定四个数，四个基本运算符<code>+,-,*,/</code>，计算二十四点。可以添加括号。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>对于具体的一组形如<code>a op1 b op2 c op3 d</code>的算式，其添加括号就相当于指定三个操作符的顺序。例如，<code>(a op1 b) op2 (c op3 d)</code>可看成先执行<code>op1</code>、<code>op3</code>再执行<code>op2</code>。<br>故理论上遍历<code>4!</code>种数字排列*<code>(4*4*4)</code>种操作符排列*<code>3!</code>种操作符调用顺序即可，实际代码中优化避免重复计算。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cal=<span class="function">(<span class="params">a,op,b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(op===<span class="string">'+'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      val:a.val+b.val,</span><br><span class="line">      exp:<span class="string">`(<span class="subst">$&#123;a.exp&#125;</span><span class="subst">$&#123;op&#125;</span><span class="subst">$&#123;b.exp&#125;</span>)`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(op===<span class="string">'-'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      val:a.val-b.val,</span><br><span class="line">      exp:<span class="string">`(<span class="subst">$&#123;a.exp&#125;</span><span class="subst">$&#123;op&#125;</span><span class="subst">$&#123;b.exp&#125;</span>)`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(op===<span class="string">'*'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      val:a.val*b.val,</span><br><span class="line">      exp:<span class="string">`(<span class="subst">$&#123;a.exp&#125;</span><span class="subst">$&#123;op&#125;</span><span class="subst">$&#123;b.exp&#125;</span>)`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(op===<span class="string">'/'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      val:a.val/b.val,</span><br><span class="line">      exp:<span class="string">`(<span class="subst">$&#123;a.exp&#125;</span><span class="subst">$&#123;op&#125;</span><span class="subst">$&#123;b.exp&#125;</span>)`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unknow op'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> schemeFrom=<span class="function">(<span class="params">a,opi,b,opj,c,opk,d</span>)=&gt;</span><span class="function"><span class="params">mode</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(mode===<span class="number">123</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> cal(cal(cal(a,opi,b),opj,c),opk,d)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(mode===<span class="number">132</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> cal(cal(a,opi,b),opj,cal(c,opk,d))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(mode===<span class="number">213</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> cal(cal(a,opi,cal(b,opj,c)),opk,d)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(mode===<span class="number">231</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> cal(a,opi,cal(cal(b,opj,c),opk,d))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(mode===<span class="number">312</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> cal(cal(a,opi,b),opj,cal(c,opk,d))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(mode===<span class="number">321</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> cal(a,opi,cal(b,opj,cal(c,opk,d)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unknow mode'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isAddOrSub=<span class="function"><span class="params">op</span>=&gt;</span>op===<span class="string">'+'</span>||op===<span class="string">'-'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mode=<span class="function">(<span class="params">opi,opj,opk</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i=isAddOrSub(opi)?<span class="number">0</span>:<span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> j=isAddOrSub(opj)?<span class="number">0</span>:<span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> k=isAddOrSub(opk)?<span class="number">0</span>:<span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> [i,j,k].join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mathEqual=<span class="function">(<span class="params">a,b</span>)=&gt;</span><span class="built_in">Math</span>.abs(a-b)&lt;<span class="number">1e-10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> solve=<span class="function"><span class="params">target</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>*(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ops=[<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</span><br><span class="line">          <span class="keyword">let</span> opi=ops[i]</span><br><span class="line">          <span class="keyword">let</span> opj=ops[j]</span><br><span class="line">          <span class="keyword">let</span> opk=ops[k]</span><br><span class="line">          <span class="keyword">let</span> md=mode(opi,opj,opk)</span><br><span class="line">          <span class="keyword">let</span> scheme</span><br><span class="line">          <span class="keyword">let</span> schemeBy=schemeFrom(&#123;</span><br><span class="line">            val:a,</span><br><span class="line">            exp:a.toString()</span><br><span class="line">          &#125;,</span><br><span class="line">          opi,&#123;</span><br><span class="line">            val:b,</span><br><span class="line">            exp:b.toString()</span><br><span class="line">          &#125;,</span><br><span class="line">          opj,&#123;</span><br><span class="line">            val:c,</span><br><span class="line">            exp:c.toString()</span><br><span class="line">          &#125;,</span><br><span class="line">          opk,&#123;</span><br><span class="line">            val:d,</span><br><span class="line">            exp:d.toString()</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">if</span>(md===<span class="string">'001'</span>||md===<span class="string">'110'</span>)&#123;</span><br><span class="line">            scheme=schemeBy(<span class="number">123</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">            scheme=schemeBy(<span class="number">132</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">            scheme=schemeBy(<span class="number">231</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(md===<span class="string">'010'</span>||md===<span class="string">'101'</span>)&#123;</span><br><span class="line">            scheme=schemeBy(<span class="number">123</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">            scheme=schemeBy(<span class="number">132</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">            scheme=schemeBy(<span class="number">213</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">            scheme=schemeBy(<span class="number">321</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(md===<span class="string">'100'</span>||md===<span class="string">'011'</span>)&#123;</span><br><span class="line">            scheme=schemeBy(<span class="number">123</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">            scheme=schemeBy(<span class="number">213</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">            scheme=schemeBy(<span class="number">231</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(md===<span class="string">'111'</span>||md===<span class="string">'000'</span>)&#123;</span><br><span class="line">            scheme=schemeBy(<span class="number">123</span>)</span><br><span class="line">            <span class="keyword">if</span>(mathEqual(scheme.val,target))&#123;</span><br><span class="line">              <span class="keyword">yield</span> scheme</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'unknow mode'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> solveOneOrder=<span class="function"><span class="params">target</span>=&gt;</span><span class="function">(<span class="params">a,b,c,d</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> schemeGenerator=solve(target)(a,b,c,d)</span><br><span class="line">  <span class="keyword">const</span> one=schemeGenerator.next()</span><br><span class="line">  <span class="keyword">return</span> one.done?<span class="number">-1</span>:one.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> solveAllOrder=<span class="function"><span class="params">target</span>=&gt;</span><span class="function">(<span class="params">a,b,c,d</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> schemeGenerator=solve(target)(a,b,c,d)</span><br><span class="line">  <span class="keyword">const</span> schemes=[]</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> scheme <span class="keyword">of</span> schemeGenerator)&#123;</span><br><span class="line">    schemes.push(scheme)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> schemes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> next_perm=<span class="function"><span class="params">arr</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.length===<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cp=arr.slice()</span><br><span class="line">    <span class="keyword">let</span> l=cp.length<span class="number">-2</span></span><br><span class="line">    <span class="keyword">while</span>(l &amp;&amp; cp[l]&gt;=cp[l+<span class="number">1</span>])&#123;</span><br><span class="line">      l--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cp[l]&gt;=cp[l+<span class="number">1</span>])&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> r=l+<span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span>(cp[r+<span class="number">1</span>]&gt;cp[l])&#123;</span><br><span class="line">        r++</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> t=cp[l]</span><br><span class="line">      cp[l]=cp[r]</span><br><span class="line">      cp[r]=t</span><br><span class="line">      <span class="keyword">let</span> tail=cp.splice(l+<span class="number">1</span>).reverse()</span><br><span class="line">      cp=cp.concat(tail)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cp</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> perm=<span class="function"><span class="params">arr</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> curr=arr.slice().sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line">  <span class="keyword">let</span> ret=[]</span><br><span class="line">  <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">    ret.push(curr)</span><br><span class="line">    curr=next_perm(curr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> solveOneGenerator=<span class="function"><span class="params">target</span>=&gt;</span><span class="function"><span class="keyword">function</span>*(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> perms=perm([a,b,c,d])</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> currPerm <span class="keyword">of</span> perms)&#123;</span><br><span class="line">    <span class="keyword">yield</span>*solve(target)(...currPerm)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> solveOne=<span class="function"><span class="params">target</span>=&gt;</span><span class="function">(<span class="params">a,b,c,d</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> schemeGenerator=solveOneGenerator(target)(a,b,c,d)</span><br><span class="line">  <span class="keyword">const</span> one=schemeGenerator.next()</span><br><span class="line">  <span class="keyword">return</span> one.done?<span class="number">-1</span>:one.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> solveAll=<span class="function"><span class="params">target</span>=&gt;</span><span class="function">(<span class="params">a,b,c,d</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> perms=perm([a,b,c,d])</span><br><span class="line">  <span class="keyword">const</span> allSchemes=perms.reduce(<span class="function">(<span class="params">allS,currPerm</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> currScheme=solveAllOrder(target)(...currPerm)</span><br><span class="line">    <span class="keyword">return</span> allS.concat(currScheme)</span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> allSchemes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(solveOne(<span class="number">24</span>)(<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">7</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[ &#123; val: 24, exp: '((5+7)*(11-9))' &#125;,</span></span><br><span class="line"><span class="comment">  &#123; val: 24, exp: '((7+5)*(11-9))' &#125;,</span></span><br><span class="line"><span class="comment">  &#123; val: 24, exp: '((11-9)*(5+7))' &#125;,</span></span><br><span class="line"><span class="comment">  &#123; val: 24, exp: '((11-9)*(7+5))' &#125; ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小胖的三角形</title>
      <link href="/2019-03/traingle/"/>
      <url>/2019-03/traingle/</url>
      
        <content type="html"><![CDATA[<p>小胖和三角形的故事。</p><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定若干正数，问其中是否存在三个数可以构成三角形，若存在则输出其周长，否则输出-1。有多组解时求出任一解即可。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>若暴力循环则复杂度为$O(n^3)$</p><p>猜想将数组排序，若存在连续的三个数可以构成三角形，则返回这三个数的和，否则返回-1。这样算法复杂度为$O(\log n+n)$。</p><p>证明：只需证明若排序后不存在连续的三个数可以构成三角形，则不存在任意三个数可以构成三角形。这是显然的。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《ES6函数式编程入门经典》读书笔记</title>
      <link href="/2019-03/beginning-functional-javascript/"/>
      <url>/2019-03/beginning-functional-javascript/</url>
      
        <content type="html"><![CDATA[<p>初入函数式编程的坑，试试这本书吧。</p><a id="more"></a><h2 id="函数式编程简介"><a href="#函数式编程简介" class="headerlink" title="函数式编程简介"></a>函数式编程简介</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>函数的概念。函数是通过其名字调用的代码，它可以传递参数并返回值。<br>函数式编程主张至少接受一个参数，并且返回一个值。<br>和方法的区别：方法是通过其名称与关联的对象来调用。</p><h3 id="函数的两个特性"><a href="#函数的两个特性" class="headerlink" title="函数的两个特性"></a>函数的两个特性</h3><ul><li>引用透明性。函数对相同的输入总有相同的输出。好处是并发编程、可缓存代码（如阶乘）。</li><li>声明式编程。与命令式编程不同，函数式编程主张以抽象的方式创建函数。</li></ul><h3 id="函数式编程的好处"><a href="#函数式编程的好处" class="headerlink" title="函数式编程的好处"></a>函数式编程的好处</h3><ul><li>纯函数。纯函数使得代码易于阅读、理解、测试。</li><li>并发代码。无需担心同步问题。</li><li>编写可缓存、可记忆的函数。</li><li>管道与（函数式）组合。组合是函数式编程范式的核心。</li><li>纯函数是数学函数，可以将数学思想引入编程思想。</li></ul><h2 id="JavaScript函数基础"><a href="#JavaScript函数基础" class="headerlink" title="JavaScript函数基础"></a>JavaScript函数基础</h2><p>书中的Node还不支持ES6，故用babel编译运行。<br>如今Node已经支持ES6，直接运行JS文件即可。</p><ul><li>forEach(array,fn)</li></ul><p>对数组的每一个元素调用fn</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="理解数据"><a href="#理解数据" class="headerlink" title="理解数据"></a>理解数据</h3><p>JavaScript数据类型</p><ul><li>Number</li><li>String</li><li>Boolean</li><li>Object</li><li>null</li><li>undefined</li></ul><p>函数是一等公民，可以赋值给变量、作为函数参数、作为函数返回值。</p><h3 id="抽象和高阶函数"><a href="#抽象和高阶函数" class="headerlink" title="抽象和高阶函数"></a>抽象和高阶函数</h3><p>抽象：隐藏实现细节，专注于实现，降低复杂度。<br>高阶函数实现抽象</p><ul><li>forEach(array,fn)</li><li>forEachObject(object,fn)</li><li>unless(predicate,fn)</li><li>times(times,fn)</li><li>every(array,fn)</li><li>some(array,fn)</li><li>sort</li></ul><h2 id="闭包与高阶函数"><a href="#闭包与高阶函数" class="headerlink" title="闭包与高阶函数"></a>闭包与高阶函数</h2><h3 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h3><p>闭包是一个函数内部的另一个函数。它有三个可访问作用域：</p><ul><li>本身内声明的变量</li><li>全局变量</li><li>外部函数定义的变量</li></ul><p>使用闭包构建高阶函数：</p><ul><li>tap<br>接受一个value，返回一个包含value的闭包函数。</li><li>unary<br>类似于适配器模式。</li><li>once<br>只执行一次给定的函数。</li><li>memoized</li></ul><h2 id="数组的函数式编程"><a href="#数组的函数式编程" class="headerlink" title="数组的函数式编程"></a>数组的函数式编程</h2><h3 id="投影函数"><a href="#投影函数" class="headerlink" title="投影函数"></a>投影函数</h3><ul><li>map</li><li>filter</li></ul><h3 id="连接函数"><a href="#连接函数" class="headerlink" title="连接函数"></a>连接函数</h3><p>连接map和filter，最简单的方法是直接嵌套。<br>concatAll是一个辅助函数，辅助函数之间的连接。</p><ul><li>concatAll(array,fn)<br>将嵌套（一层的）数组转化为非嵌套的单一数组。</li></ul><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><ul><li>reduce(array,fn,initValue)<br>将数组归约成一个单一的值。</li></ul><p>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reduce=<span class="function">(<span class="params">array,fn,indexValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(indexValue)&#123;</span><br><span class="line">    <span class="keyword">let</span> result=indexValue</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">      result=fn(result,array[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result=array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">      result=fn(result,array[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><ul><li>zip(leftArr,rightArr,fn)</li></ul><h2 id="柯里化与偏应用"><a href="#柯里化与偏应用" class="headerlink" title="柯里化与偏应用"></a>柯里化与偏应用</h2><p>预备知识：一元函数、二元函数、变参函数。</p><p>概念：柯里化是将一个多参函数转化为嵌套的一元函数的过程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry=<span class="function"><span class="params">fn</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> fn !==<span class="string">'function'</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'no function provided'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curriedFn</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(args.length&lt;fn.length)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(args)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">          <span class="keyword">return</span> curriedFn.apply(<span class="literal">null</span>,args.concat([].slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(args)</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>,args)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add=<span class="function">(<span class="params">a,b,c</span>)=&gt;</span>a+b+c</span><br><span class="line"><span class="keyword">let</span> curriedAdd=curry(add)</span><br><span class="line">curry(add)(<span class="number">3</span>)(<span class="number">7</span>)(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><p>偏函数用于创建创建可重用的函数，而不需要自己写包装器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> partial=<span class="function">(<span class="params">fn,...partialArgs</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args=partialArgs</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...fullArguments</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arg=<span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> fullArgs=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;args.length &amp;&amp; arg&lt;fullArguments.length;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(args[i]===<span class="literal">undefined</span>)&#123;</span><br><span class="line">        fullArgs.push(fullArguments[arg++])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        fullArgs.push(args[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>,fullArgs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不需要每次写这样的包装器了</span></span><br><span class="line"><span class="comment">//let ugly=fn=&gt;setTimeout(fn,10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> delayTenMs=partial(setTimeout,<span class="literal">undefined</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">delayTenMs(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">delayTenMs(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'goodbyle world'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="组合与管道"><a href="#组合与管道" class="headerlink" title="组合与管道"></a>组合与管道</h2><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>概念：以一个函数的输出作为另一个函数的输入的方式，将多个函数结合起来。</p><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><ul><li>compose(…fns)<br>组合多个函数，数据流是从右至左的。</li><li>pipe(…fns)<br>数据流是从左至右的，管道pipeline也可以称作序列sequence。<br>实现上两者只有很小的不同。</li></ul><p>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose=<span class="function">(<span class="params">...fns</span>)=&gt;</span></span><br><span class="line">  (value)=&gt;</span><br><span class="line">    reduce(fns.reverse(),(acc,fn)=&gt;fn(acc),value)</span><br><span class="line"><span class="keyword">const</span> pipe=<span class="function">(<span class="params">...fns</span>)=&gt;</span></span><br><span class="line">  (value)=&gt;</span><br><span class="line">    reduce(fns,(acc,fn)=&gt;fn(acc),value)</span><br></pre></td></tr></table></figure><p>如何组合多参函数？使用柯里化和偏应用即可。<br>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add=<span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> div=<span class="function">(<span class="params">x,y</span>)=&gt;</span>x/y</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ac=compose(curry(div)(<span class="number">50</span>),curry(add)(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 50/(4+x)</span></span><br><span class="line"><span class="built_in">console</span>.log(ac(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="组合的优势"><a href="#组合的优势" class="headerlink" title="组合的优势"></a>组合的优势</h3><p>组合符合结合律。</p><h3 id="组合的应用"><a href="#组合的应用" class="headerlink" title="组合的应用"></a>组合的应用</h3><p>方便地log。创建identity函数，在数据流中随意的插入或移除，方便调试。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> identity=<span class="function">(<span class="params">it</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(it)</span><br><span class="line">  <span class="keyword">return</span> it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函子"><a href="#函子" class="headerlink" title="函子"></a>函子</h2><p>函子是一个对象或者类，它实现了map函数，在遍历每个对象值的时候生成新的对象。<br>简单的说，函子是一个包含值的容器，并且实现了map函数。<br>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value=value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> Container.of(fn(<span class="keyword">this</span>.value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h3><p>该函子会检查传入的值是否为null或者undefined，如果是则什么也不做。<br>该函子用于错误处理。<br>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maybe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value=value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Maybe(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isNothing()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value===<span class="literal">null</span> || <span class="keyword">this</span>.value===<span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isNothing()?Maybe.of(<span class="literal">null</span>):Maybe.of(fn(<span class="keyword">this</span>.value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Either"><a href="#Either" class="headerlink" title="Either"></a>Either</h3><p>Either用于解决分支拓展问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nothing</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value=value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Nothing(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Some</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value=value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Some(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> Some.of(fn(<span class="keyword">this</span>.value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Either=&#123;</span><br><span class="line">  Nothing:Nothing,</span><br><span class="line">  Some:Some</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Either</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> summary=<span class="function"><span class="params">data</span>=&gt;</span>data.reduce(<span class="function">(<span class="params">sum,val</span>)=&gt;</span>sum+val,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cal=<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    sum=Either.Some.of(summary(data))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    sum=Either.Nothing.of(&#123;</span><br><span class="line">      msg:<span class="string">'something has wrong.'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cal(<span class="number">5</span>))</span><br><span class="line"><span class="comment">//Nothing &#123; value: &#123; msg: 'something has wrong.' &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cal([<span class="number">5</span>]))</span><br><span class="line"><span class="comment">//Some &#123; value: 5 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Monad"><a href="#Monad" class="headerlink" title="Monad"></a>Monad</h2><p>Monad是一个实现chain方法的函子。<br>join方法返回函子包含的值。<br>chain方法包装了map和join方法。<br>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maybe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value=value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Maybe(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isNothing()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value===<span class="literal">null</span> || <span class="keyword">this</span>.value===<span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  join()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isNothing()?Maybe.of(<span class="literal">null</span>):<span class="keyword">this</span>.value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chain(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map(fn).join()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isNothing()?Maybe.of(<span class="literal">null</span>):Maybe.of(fn(<span class="keyword">this</span>.value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用（书上的示例太复杂，写个简单的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bro=Maybe.of(&#123;</span><br><span class="line">  name:<span class="string">'xhb'</span>,</span><br><span class="line">  age:<span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们来模仿一个场景！首先我们给小熊加一岁。</span></span><br><span class="line"><span class="keyword">let</span> newBro=bro.map(<span class="function"><span class="params">bear</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...bear,</span><br><span class="line">    age:bear.age+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们继续处理小熊。</span></span><br><span class="line"><span class="comment">//为了方便，我们直接输出小熊。</span></span><br><span class="line">newBro.map(<span class="function"><span class="params">bear</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(bear)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//天啊！这样太麻烦了。为了输出小熊我们不得不调用map函数。</span></span><br><span class="line"><span class="comment">//关键是，此刻我们关心的是bear，而不是包装了bear的Maybe</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以这样</span></span><br><span class="line"><span class="keyword">let</span> bigBear=bro.map(<span class="function"><span class="params">bear</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...bear,</span><br><span class="line">    age:bear.age+<span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bigBear)</span><br><span class="line"><span class="comment">//顺利取出了结果！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每次都要写map和join，不如封装到一起</span></span><br><span class="line"><span class="keyword">let</span> biggerBear=bro.chain(<span class="function"><span class="params">bear</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...bear,</span><br><span class="line">    age:bear.age+<span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(biggerBear)</span><br><span class="line"><span class="comment">//真好</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程范式 </category>
          
          <category> 函数式编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数式编程 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
