<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lodash API归档</title>
      <link href="/2019-03/lodash-api/"/>
      <url>/2019-03/lodash-api/</url>
      
        <content type="html"><![CDATA[<p>根据函数签名归档的Lodash API（<a href="https://lodash.com/docs/4.17.11" target="_blank" rel="noopener">v4.17.11</a>）。<br><a id="more"></a><br>方法如无特别说明则不改变原集合。</p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="array-gt-array-array"><a href="#array-gt-array-array" class="headerlink" title="array -&gt; array(array)"></a>array -&gt; array(array)</h2><p><code>_.chunk</code><br>按步长分割数组。</p><h2 id="array-gt-array"><a href="#array-gt-array" class="headerlink" title="array -&gt; array"></a>array -&gt; array</h2><p><code>_.compact</code><br>筛除数组中的false,null,0,’’,undefined,NAN。</p><p><code>drop</code><br>筛除头部n个元素，默认n=1</p><p><code>dropWhile</code><br>从头部开始筛除元素，直到条件不满足。</p><p><code>dropRight</code><br>筛除尾部n个元素，默认n=1</p><p><code>dropRightWhile</code><br>从尾部开始筛除元素，直到条件不满足。</p><p><code>_.flatten</code>,<code>_.flattenDeep</code>,<code>_.flattenDepth</code><br>扁平处理一层；<br>递归扁平处理;<br>扁平处理时指定层数。</p><p><code>_.initial</code><br>筛除最后一个元素</p><p><code>_.tail</code><br>筛除第一个元素</p><p><code>_.slice</code><br>截取数组。默认拷贝完整数组。</p><p><code>_.take</code><br>截取数组中开始的n个元素，默认n=1。</p><p><code>_.takeWhile</code><br>从开头往后截取元素，直到条件不满足。</p><p><code>_.takeRight</code><br>截取数组中倒数的n个元素，默认n=1。</p><p><code>_.takeRightWhile</code><br>从末尾往前截取元素，直到条件不满足。</p><p><code>_.uniq</code>,<code>_.uniqBy</code>,<code>_.uniqWith</code><br>数组去重。</p><p><code>_.sortedUniq</code>,<code>_.sortedUniqBy</code><br>为排好序的数组优化的去重函数。</p><p><code>_.without</code><br>筛除与指定元素相同的元素。</p><h2 id="…array-gt-array"><a href="#…array-gt-array" class="headerlink" title="…array -&gt; array"></a>…array -&gt; array</h2><p><code>_.concat</code><br>连接数组。</p><p><code>_.difference</code>,<code>_.differenceBy</code>,<code>_.differenceWith</code><br>筛除第一个数组中，同时存在于其余任一数组的元素。</p><p><code>_.intersection</code>,<code>_.intersectionBy</code>,<code>_.intersectionWtih</code><br>筛选第一个数组中，同时存在于其余所有数组的元素。</p><p><code>_.union</code>,<code>_.unionBy</code>,<code>_.unionWith</code><br>合并数组并去重。</p><p><code>_.xor</code>,<code>xorBy</code>,<code>xorWith</code><br>获取集合的对称差。</p><h2 id="array-…array-gt-array-…array"><a href="#array-…array-gt-array-…array" class="headerlink" title="array(…array) -&gt; array(…array)"></a>array(…array) -&gt; array(…array)</h2><p><code>_.zip</code>,<code>zipWith</code><br>组合多个数组。</p><p><code>_.unzip</code>,<code>_.unzipWith</code><br>解组数组。</p><h2 id="array-array-array-gt-object"><a href="#array-array-array-gt-object" class="headerlink" title="array(array,array) -&gt; object"></a>array(array,array) -&gt; object</h2><p><code>_.zipObject</code><br>输入键数组和值数组，返回对象。</p><p><code>_.zipObjectDeep</code><br>输入键（支持路径）数组和值数组，返回对象。</p><h2 id="array-gt-number"><a href="#array-gt-number" class="headerlink" title="array -&gt; number"></a>array -&gt; number</h2><p><code>_.findIndex</code>,<code>_.findLastIndex</code></p><p><code>_.indexOf</code></p><p><code>_.lastIndexOf</code></p><p><code>_.sortedIndex</code>,<code>_.sortedIndexBy</code><br>数组必须升序排列。返回二叉搜索value插入的下标的最小值。</p><p><code>_.sortedLastIndex</code>,<code>_.sortedLastIndexOf</code><br>数组必须升序排列。返回二叉搜索value插入的下标的最大值。</p><p><code>_.sortedIndexOf</code><br>返回升序数组中第一个出现的value的下标。</p><h2 id="array-gt-element"><a href="#array-gt-element" class="headerlink" title="array -&gt; element"></a>array -&gt; element</h2><p><code>_.head</code><br>获取数组第一个元素。</p><p><code>_.last</code><br>获取数组中最后一个元素。</p><p><code>_.nth</code><br>获取数组中下标为n的元素，n默认为0。</p><h2 id="array-gt-string"><a href="#array-gt-string" class="headerlink" title="array -&gt; string"></a>array -&gt; string</h2><p><code>_.join</code><br>连接数组元素，默认分隔符为<code>,</code></p><h2 id="pairs-gt-object"><a href="#pairs-gt-object" class="headerlink" title="pairs -&gt; object"></a>pairs -&gt; object</h2><p><code>_.fromPairs</code><br>从包含键值对的数组构建对象。</p><h2 id="object-gt-pairs"><a href="#object-gt-pairs" class="headerlink" title="object -&gt; pairs"></a>object -&gt; pairs</h2><p><code>_.toPairs</code><br>解构对象成包含键值对的数组。</p><h2 id="array-gt-array-改变原数组"><a href="#array-gt-array-改变原数组" class="headerlink" title="array -&gt; array 改变原数组"></a>array -&gt; array 改变原数组</h2><p><code>_.fill</code><br>填充数组，可指定起始点</p><p><code>_.pull</code>,<code>_.pullAll</code>,<code>_.pullAllBy</code>,<code>_.pullAllWith</code><br>移除与指定元素相同的元素。</p><p><code>_.pullAt</code><br>移除指定下标的元素。<br>返回被移除的元素。</p><p><code>_.remove</code><br>依据指定的规则移除元素。<br>返回被移除的元素。</p><p><code>_.reverse</code><br>反转数组。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Lodash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《ES6函数式编程入门经典》读书笔记</title>
      <link href="/2019-03/beginning-functional-javascript/"/>
      <url>/2019-03/beginning-functional-javascript/</url>
      
        <content type="html"><![CDATA[<p>初入函数式编程的坑，试试这本书吧。<br><a id="more"></a></p><h1 id="函数式编程简介"><a href="#函数式编程简介" class="headerlink" title="函数式编程简介"></a>函数式编程简介</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>函数的概念。函数是通过其名字调用的代码，它可以传递参数并返回值。<br>函数式编程主张至少接受一个参数，并且返回一个值。<br>和方法的区别：方法是通过其名称与关联的对象来调用。</p><h2 id="函数的两个特性"><a href="#函数的两个特性" class="headerlink" title="函数的两个特性"></a>函数的两个特性</h2><ul><li>引用透明性。函数对相同的输入总有相同的输出。好处是并发编程、可缓存代码（如阶乘）。</li><li>声明式编程。与命令式编程不同，函数式编程主张以抽象的方式创建函数。</li></ul><h2 id="函数式编程的好处"><a href="#函数式编程的好处" class="headerlink" title="函数式编程的好处"></a>函数式编程的好处</h2><ul><li>纯函数。纯函数使得代码易于阅读、理解、测试。</li><li>并发代码。无需担心同步问题。</li><li>编写可缓存、可记忆的函数。</li><li>管道与（函数式）组合。组合是函数式编程范式的核心。</li><li>纯函数是数学函数，可以将数学思想引入编程思想。</li></ul><h1 id="JavaScript函数基础"><a href="#JavaScript函数基础" class="headerlink" title="JavaScript函数基础"></a>JavaScript函数基础</h1><p>书中的Node还不支持ES6，故用babel编译运行。<br>如今Node已经支持ES6，直接运行JS文件即可。</p><ul><li>forEach(array,fn)</li></ul><p>对数组的每一个元素调用fn</p><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><h2 id="理解数据"><a href="#理解数据" class="headerlink" title="理解数据"></a>理解数据</h2><p>JavaScript数据类型</p><ul><li>Number</li><li>String</li><li>Boolean</li><li>Object</li><li>null</li><li>undefined</li></ul><p>函数是一等公民，可以赋值给变量、作为函数参数、作为函数返回值。</p><h2 id="抽象和高阶函数"><a href="#抽象和高阶函数" class="headerlink" title="抽象和高阶函数"></a>抽象和高阶函数</h2><p>抽象：隐藏实现细节，专注于实现，降低复杂度。<br>高阶函数实现抽象</p><ul><li>forEach(array,fn)</li><li>forEachObject(object,fn)</li><li>unless(predicate,fn)</li><li>times(times,fn)</li><li>every(array,fn)</li><li>some(array,fn)</li><li>sort</li></ul><h1 id="闭包与高阶函数"><a href="#闭包与高阶函数" class="headerlink" title="闭包与高阶函数"></a>闭包与高阶函数</h1><h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><p>闭包是一个函数内部的另一个函数。它有三个可访问作用域：</p><ul><li>本身内声明的变量</li><li>全局变量</li><li>外部函数定义的变量</li></ul><p>使用闭包构建高阶函数：</p><ul><li>tap<br>接受一个value，返回一个包含value的闭包函数。</li><li>unary<br>类似于适配器模式。</li><li>once<br>只执行一次给定的函数。</li><li>memoized</li></ul><h1 id="数组的函数式编程"><a href="#数组的函数式编程" class="headerlink" title="数组的函数式编程"></a>数组的函数式编程</h1><h2 id="投影函数"><a href="#投影函数" class="headerlink" title="投影函数"></a>投影函数</h2><ul><li>map</li><li>filter</li></ul><h2 id="连接函数"><a href="#连接函数" class="headerlink" title="连接函数"></a>连接函数</h2><p>连接map和filter，最简单的方法是直接嵌套。<br>concatAll是一个辅助函数，辅助函数之间的连接。</p><ul><li>concatAll(array,fn)<br>将嵌套（一层的）数组转化为非嵌套的单一数组。</li></ul><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><ul><li>reduce(array,fn,initValue)<br>将数组归约成一个单一的值。</li></ul><p>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reduce=<span class="function">(<span class="params">array,fn,indexValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(indexValue)&#123;</span><br><span class="line">    <span class="keyword">let</span> result=indexValue</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">      result=fn(result,array[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result=array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">      result=fn(result,array[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><ul><li>zip(leftArr,rightArr,fn)</li></ul><h1 id="柯里化与偏应用"><a href="#柯里化与偏应用" class="headerlink" title="柯里化与偏应用"></a>柯里化与偏应用</h1><p>预备知识：一元函数、二元函数、变参函数。</p><p>概念：柯里化是将一个多参函数转化为嵌套的一元函数的过程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry=<span class="function"><span class="params">fn</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> fn !==<span class="string">'function'</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'no function provided'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curriedFn</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(args.length&lt;fn.length)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(args)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">          <span class="keyword">return</span> curriedFn.apply(<span class="literal">null</span>,args.concat([].slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(args)</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>,args)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add=<span class="function">(<span class="params">a,b,c</span>)=&gt;</span>a+b+c</span><br><span class="line"><span class="keyword">let</span> curriedAdd=curry(add)</span><br><span class="line">curry(add)(<span class="number">3</span>)(<span class="number">7</span>)(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>偏函数用于创建创建可重用的函数，而不需要自己写包装器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> partial=<span class="function">(<span class="params">fn,...partialArgs</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args=partialArgs</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...fullArguments</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arg=<span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> fullArgs=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;args.length &amp;&amp; arg&lt;fullArguments.length;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(args[i]===<span class="literal">undefined</span>)&#123;</span><br><span class="line">        fullArgs.push(fullArguments[arg++])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        fullArgs.push(args[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>,fullArgs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不需要每次写这样的包装器了</span></span><br><span class="line"><span class="comment">//let ugly=fn=&gt;setTimeout(fn,10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> delayTenMs=partial(setTimeout,<span class="literal">undefined</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">delayTenMs(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">delayTenMs(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'goodbyle world'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="组合与管道"><a href="#组合与管道" class="headerlink" title="组合与管道"></a>组合与管道</h1><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>概念：以一个函数的输出作为另一个函数的输入的方式，将多个函数结合起来。</p><h2 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h2><ul><li>compose(…fns)<br>组合多个函数，数据流是从右至左的。</li><li>pipe(…fns)<br>数据流是从左至右的，管道pipeline也可以称作序列sequence。<br>实现上两者只有很小的不同。</li></ul><p>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose=<span class="function">(<span class="params">...fns</span>)=&gt;</span></span><br><span class="line">  (value)=&gt;</span><br><span class="line">    reduce(fns.reverse(),(acc,fn)=&gt;fn(acc),value)</span><br><span class="line"><span class="keyword">const</span> pipe=<span class="function">(<span class="params">...fns</span>)=&gt;</span></span><br><span class="line">  (value)=&gt;</span><br><span class="line">    reduce(fns,(acc,fn)=&gt;fn(acc),value)</span><br></pre></td></tr></table></figure><p>如何组合多参函数？使用柯里化和偏应用即可。<br>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add=<span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> div=<span class="function">(<span class="params">x,y</span>)=&gt;</span>x/y</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ac=compose(curry(div)(<span class="number">50</span>),curry(add)(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 50/(4+x)</span></span><br><span class="line"><span class="built_in">console</span>.log(ac(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="组合的优势"><a href="#组合的优势" class="headerlink" title="组合的优势"></a>组合的优势</h2><p>组合符合结合律。</p><h2 id="组合的应用"><a href="#组合的应用" class="headerlink" title="组合的应用"></a>组合的应用</h2><p>方便地log。创建identity函数，在数据流中随意的插入或移除，方便调试。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> identity=<span class="function">(<span class="params">it</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(it)</span><br><span class="line">  <span class="keyword">return</span> it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函子"><a href="#函子" class="headerlink" title="函子"></a>函子</h1><p>函子是一个对象或者类，它实现了map函数，在遍历每个对象值的时候生成新的对象。<br>简单的说，函子是一个包含值的容器，并且实现了map函数。<br>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value=value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> Container.of(fn(<span class="keyword">this</span>.value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h2><p>该函子会检查传入的值是否为null或者undefined，如果是则什么也不做。<br>该函子用于错误处理。<br>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maybe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value=value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Maybe(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isNothing()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value===<span class="literal">null</span> || <span class="keyword">this</span>.value===<span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isNothing()?Maybe.of(<span class="literal">null</span>):Maybe.of(fn(<span class="keyword">this</span>.value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Either"><a href="#Either" class="headerlink" title="Either"></a>Either</h2><p>Either用于解决分支拓展问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nothing</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value=value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Nothing(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Some</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value=value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Some(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> Some.of(fn(<span class="keyword">this</span>.value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Either=&#123;</span><br><span class="line">  Nothing:Nothing,</span><br><span class="line">  Some:Some</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Either</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> summary=<span class="function"><span class="params">data</span>=&gt;</span>data.reduce(<span class="function">(<span class="params">sum,val</span>)=&gt;</span>sum+val,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cal=<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    sum=Either.Some.of(summary(data))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    sum=Either.Nothing.of(&#123;</span><br><span class="line">      msg:<span class="string">'something has wrong.'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cal(<span class="number">5</span>))</span><br><span class="line"><span class="comment">//Nothing &#123; value: &#123; msg: 'something has wrong.' &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cal([<span class="number">5</span>]))</span><br><span class="line"><span class="comment">//Some &#123; value: 5 &#125;</span></span><br></pre></td></tr></table></figure><h1 id="Monad"><a href="#Monad" class="headerlink" title="Monad"></a>Monad</h1><p>Monad是一个实现chain方法的函子。<br>join方法返回函子包含的值。<br>chain方法包装了map和join方法。<br>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maybe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value=value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>(value)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Maybe(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isNothing()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value===<span class="literal">null</span> || <span class="keyword">this</span>.value===<span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  join()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isNothing()?Maybe.of(<span class="literal">null</span>):<span class="keyword">this</span>.value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chain(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map(fn).join()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isNothing()?Maybe.of(<span class="literal">null</span>):Maybe.of(fn(<span class="keyword">this</span>.value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用（书上的示例太复杂，写个简单的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bro=Maybe.of(&#123;</span><br><span class="line">  name:<span class="string">'xhb'</span>,</span><br><span class="line">  age:<span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们来模仿一个场景！首先我们给小熊加一岁。</span></span><br><span class="line"><span class="keyword">let</span> newBro=bro.map(<span class="function"><span class="params">bear</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...bear,</span><br><span class="line">    age:bear.age+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们继续处理小熊。</span></span><br><span class="line"><span class="comment">//为了方便，我们直接输出小熊。</span></span><br><span class="line">newBro.map(<span class="function"><span class="params">bear</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(bear)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//天啊！这样太麻烦了。为了输出小熊我们不得不调用map函数。</span></span><br><span class="line"><span class="comment">//关键是，此刻我们关心的是bear，而不是包装了bear的Maybe</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以这样</span></span><br><span class="line"><span class="keyword">let</span> bigBear=bro.map(<span class="function"><span class="params">bear</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...bear,</span><br><span class="line">    age:bear.age+<span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bigBear)</span><br><span class="line"><span class="comment">//顺利取出了结果！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每次都要写map和join，不如封装到一起</span></span><br><span class="line"><span class="keyword">let</span> biggerBear=bro.chain(<span class="function"><span class="params">bear</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...bear,</span><br><span class="line">    age:bear.age+<span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(biggerBear)</span><br><span class="line"><span class="comment">//真好</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程范式 </category>
          
          <category> 函数式编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数式编程 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
